/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package threadingtermworks;

import static java.lang.System.in;
import static java.util.Collections.list;
import java.util.Scanner;
import java.lang.Math;

class Ascending implements Runnable
{
    int List[];
    Ascending(int l[])
    {
        List=l;
    }
    public void run()
    { int temp;
        for(int i=0;i<List.length;i++)
        {
            for(int j=0;j<(List.length)-1-i;j++)
            {
               if(List[j]>List[j+1]){
                   temp=List[j];
                   List[j]=List[j+1];
                   List[j+1]=temp;
               } 
            }
        }
        System.out.println("Thead-> "+Thread.currentThread().getName());
        System.out.println("Ascending sorted is");
        for(int i=0;i<List.length;i++)
            System.out.print(" "+List[i]);
    }
}

class Descending implements Runnable
{
    int List[];
    Descending(int l[])
    {
        List=l;
    }
    @Override
    public void run()
    { int temp;
        for(int i=0;i<List.length;i++)
        {
            for(int j=0;j<List.length-1-i;j++)
            {
               if(List[j]<List[j+1]){
                   temp=List[j];
                   List[j]=List[j+1];
                   List[j+1]=temp;
               } 
            }
        }
        System.out.println("Thead-> "+Thread.currentThread().getName());
        System.out.println("Descending sorted is");
        for(int i=0;i<List.length;i++)
            System.out.print(" "+List[i]);
    }
}
public class Trail3 {
    public static void main(String []args) throws Exception
    {
        Scanner in= new Scanner(System.in);
        
        System.out.println("Enter the size of integer list");
        int n=in.nextInt();
        int []array=new int[n];
        for(int i=0;i<n;i++)
            array[i]=(int) (Math.random()*100);
        
        Ascending a=new Ascending(array);
        Descending d=new Descending(array);
        Thread t1=new Thread(a);
        Thread t2=new Thread(d);
        t1.start();
        Thread.sleep(1000);
        t2.start();
    }
}
